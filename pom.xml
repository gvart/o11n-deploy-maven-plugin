<!-- 
/*	This file is part of project "o11n-deploy-maven-plugin", a computer software	* 
 *  plugin for deploying Java plugins to VMware vRealize Orchestrator using			*
 *  Maven build management.															*
 *																					*
 *																					*
 *	Copyright (C) 2016 Robert Szymczak	(m451@outlook.com)				        	*
 *																					*
 *																					*
 *	This program is free software: you can redistribute it and/or modify			*
 *	it under the terms of the GNU Lesser General Public License as published 		*
 *	by the Free Software Foundation, either version 3 of the License, or			*
 *	(at your option) any later version.												*
 *																					*
 *	This program is distributed in the hope that it will be useful,					*
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of					*
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  							*
 *	See the GNU Lesser General Public License for more details.						*
 *																					*
 *	You should have received a copy of the GNU Lesser General Public License		*
 *	along with this program.  If not, see <http://www.gnu.org/licenses/>.			*/
-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.github.m451</groupId>
	<artifactId>o11n-deploy-maven-plugin</artifactId>
	<version>0.1.2</version>
	<packaging>maven-plugin</packaging>
	<name>${project.groupId}:${project.artifactId}</name>
	<description>A Maven plug-in that helps you develop Java plug-ins for VMware vRealize Orchestrator by automatically installing the compiled *.vmoapp or *.dar files on the configured vRealize Orchestrator server.</description>
	<url>https://github.com/m451/o11n-deploy-maven-plugin</url>

	<licenses>
		<license>
			<name>GNU LESSER GENERAL PUBLIC LICENSE, Version 3, 29 June 2007</name>
			<url>https://www.gnu.org/licenses/lgpl-3.0.txt</url>
		</license>
	</licenses>
	<developers>
		<developer>
			<name>Robert Szymczak</name>
			<email>m451@outlook.com</email>
		</developer>
	</developers>
	<scm>
		<connection>scm:git:git://github.com/m451/o11n-deploy-maven-plugin.git</connection>
		<developerConnection>scm:git:ssh://github.com/m451/o11n-deploy-maven-plugin.git</developerConnection>
		<url>https://github.com/m451/o11n-deploy-maven-plugin</url>
		<tag>HEAD</tag>
	</scm>
	
	<profiles>
		<!-- This profile is used in development. It is active by default.
			run 'mvn install -P dev' for forced profile activation. -->
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<finalName>${project.artifactId}-${project.version}-${buildNumber}</finalName>
			</build>
		</profile>
		<!-- This profile is used when deploying a new plugin version to Sonatype OSSRH
			run 'mvn clean deploy -P ossrh' for profile activation. You will need 
			to specify additional parameters when using this profile, see below. -->
		<profile>
			<!-- NOTE In order to perform a release deployment you have to edit your 
				version in all your POM files to use release versions. This means that 
				they can not end in -SNAPSHOT In addition plugin and dependency 
				declarations can also not use snapshot versions. -->
			<!-- NOTE make sure you configure the OSSRH server with username and 
				password before running this profile as mentioned in the sonatype 
				OSSRH guide at http://central.sonatype.org/pages/ossrh-guide.html -->
			<id>ossrh</id>
			<activation>
				<activeByDefault>false</activeByDefault>
			</activation>
			<!-- Sonatype OSSRH deployment -->
			<distributionManagement>
				<snapshotRepository>
					<id>ossrh</id>
					<url>https://oss.sonatype.org/content/repositories/snapshots</url>
				</snapshotRepository>
				<repository>
					<id>ossrh</id>
					<url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
				</repository>
			</distributionManagement>
			<build>
				<finalName>${project.artifactId}-${project.version}</finalName>
				<plugins>
					<!-- Sonatype OSSRH deployment -->
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<version>1.6.7</version>
						<extensions>true</extensions>
						<configuration>
							<serverId>ossrh</serverId>
							<nexusUrl>https://oss.sonatype.org/</nexusUrl>
							<!-- Quote: "With the property autoReleaseAfterClose set to false you can manually 
								inspect the staging repository in the Nexus Repository Manager and trigger 
								a release of the staging repository later with 'mvn nexus-staging:release'.
								If you find something went wrong you can drop the staging repository with
								'mvn nexus-staging:drop'." You can release / drop using the sonatype 
								UI as well at https://oss.sonatype.org/#stagingRepositories -->
							<autoReleaseAfterClose>false</autoReleaseAfterClose>
						</configuration>
					</plugin>
					<!-- JavaSources requirement for Sonatype OSSRH deployment -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-source-plugin</artifactId>
						<version>3.0.1</version>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar-no-fork</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- JavaDoc requirement for Sonatype OSSRH deployment -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-javadoc-plugin</artifactId>
						<version>2.9.1</version>
						<executions>
							<execution>
								<id>attach-javadocs</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<!-- GPG signing requirement for Sonatype OSSRH deployment 
						NOTE that you have to specify the gpg.passphrase param 
						within your settings.xml before running this profile. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<version>1.6</version>
						<executions>
							<execution>
							<id>sign-artifacts</id>
							<phase>verify</phase>
								<goals>
									<goal>sign</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<!-- Use fingerprint instead of short / long key id due to possible collision attacks -->
							<keyname>8C1076FE7622DB407B65C3C58E5956631272A74A</keyname>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
	
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-plugin-api</artifactId>
			<version>2.0</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.plugin-tools</groupId>
			<artifactId>maven-plugin-annotations</artifactId>
			<version>3.2</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.codehaus.plexus</groupId>
			<artifactId>plexus-utils</artifactId>
			<version>3.0.8</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.8.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.mashape.unirest</groupId>
			<artifactId>unirest-java</artifactId>
			<version>1.4.9</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven</groupId>
			<artifactId>maven-project</artifactId>
			<version>2.0.9</version>
		</dependency>
		<dependency>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-plugin-plugin</artifactId>
			<version>3.3</version>
			<type>maven-plugin</type>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- automate build number increment for easier development -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.4</version>
				<configuration>
					<doCheck>false</doCheck>
					<doUpdate>false</doUpdate>
				</configuration>
				<executions>
					<!-- Use shorted git revision id for production packages -->
					<execution>
						<id>create-timestamp-id-prod</id>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
						<configuration>
							<shortRevisionLength>7</shortRevisionLength>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Build>${buildNumber}</Implementation-Build>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-plugin-plugin</artifactId>
				<version>3.3</version>
				<configuration>
					<goalPrefix>o11n-deploy</goalPrefix>
					<skipErrorNoDescriptorsFound>true</skipErrorNoDescriptorsFound>
				</configuration>
				<executions>
					<execution>
						<id>mojo-descriptor</id>
						<goals>
							<goal>descriptor</goal>
						</goals>
					</execution>
					<execution>
						<id>help-goal</id>
						<goals>
							<goal>helpmojo</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
	
	<repositories>
		<repository>
			<id>central</id>
			<name>Maven Repository</name>
			<url>http://repo1.maven.org/maven2</url>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<pluginRepositories>
		<pluginRepository>
			<id>central</id>
			<name>Maven Plugin Repository</name>
			<url>http://repo1.maven.org/maven2</url>
			<releases>
				<updatePolicy>always</updatePolicy>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>
</project>
